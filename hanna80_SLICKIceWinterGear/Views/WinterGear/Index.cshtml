@model IEnumerable<hanna80_SLICKIceWinterGear.Models.WinterGear>

@*@using Microsoft.AspNetCore.Mvc;
@using PagedList;
@using PagedList.Mvc;*@
@using hanna80_SLICKIceWinterGear.Utilities;

@{
	ViewData["Title"] = "My Items";

	IPaginator<WinterGear> paginator = ViewBag.paginator;
}

<h2>My Items</h2>

@*<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
	<div class="btn-group mr-2" role="group" aria-label="First group">
		<button type="button" class="btn btn-secondary"
			onclick="location.href = '@Url.Action("Index", new { page = 1, sortOrder = ViewBag.sortOrder })';">1</button>
		<button type="button" class="btn btn-secondary"
			onclick="location.href = '@Url.Action("Index", new { page = 2, sortOrder = ViewBag.sortOrder })';">2</button>
		<button type="button" class="btn btn-secondary"
			onclick="location.href = '@Url.Action("Index", new { page = 3, sortOrder = ViewBag.sortOrder })';">3</button>
	</div>
</div>*@

@using (Html.BeginForm("Index", "WinterGear", FormMethod.Get))
{
	<div id="FilterSearch" class="form-horizontal">

		<div class="row">

			<div class="form-group col-md-6">
				@Html.Label("SearchCriteria", "Search by Name", new { @class = "control-label" })
				@Html.TextBox("SearchCriteria", null, new { @class = "form-control" })
			</div>

			<div class="form-group col-md-6">
				@Html.Label("GearTypeFilter", "Filter by Gear Type", htmlAttributes: new { @class = "control-label" })
				@Html.DropDownList(
				"GearTypeFilter",
				new SelectList(ViewBag.gearTypes),
				"All Gear Types",
				new { @class = "form-control" }
			)
			</div>

		</div>

		<div class="row">

			<div class="form-group col-md-3">
				@*@Html.Raw(paginator.RenderPaginatorSizeControl())*@
				@Html.Label("PageSize", "Items Per Page", new { @class = "control-label" })
				<input name="PageSize" class="form-control" type="number" value="@paginator.ItemsPerPage" />
			</div>

		</div>

		<div class="form-group">
			<input
				   type="submit"
				   value="Find Items"
				   class="btn col-md-2 col-md-offset-1"
			/>
			<input
				   type="button"
				   value="Reset Ordering"
				   onclick="location.href='@Url.Action("Index", "WinterGear", new { PageSize = paginator.ItemsPerPage })'"
				   class="btn col-md-2 col-md-offset-1"
			/>
			@if (ViewBag.isSearch)
			{
				<input type="button"
					   value="Reverse Order"
					   onclick="location.href='@Url.Action("Index", "WinterGear", new SearchViewModel { PageSize = paginator.ItemsPerPage, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter, SortOrder = ViewBag.sortOrder, FlipOrder = !ViewBag.flipOrder })'"
					   class="btn col-md-2 col-md-offset-1"
				/>
			}
			else
			{
				<input type="button"
					   value="Reverse Order"
					   onclick="location.href='@Url.Action("Index", "WinterGear", new SortViewModel { PageSize = paginator.ItemsPerPage, SortOrder = ViewBag.sortOrder, FlipOrder = !ViewBag.flipOrder })'"
					   class="btn col-md-2 col-md-offset-1"
				/>
			}
		</div>

	</div>
}

<p>
	<a asp-action="Create">Create New</a>
</p>

<hr />

<p>
	Page @(paginator.PageCount < paginator.CurrentPageNumber ? 0 : paginator.CurrentPageNumber) of @paginator.PageCount<br />
	Total of @(paginator.ItemCount) @(paginator.ItemCount != 1 ? "items" : "item")
</p>
<div class="row">
	<div class="col-md-12">
		@if (paginator.PageCount > 1)
		{
			@if (ViewBag.isSearch)
			{
				@Html.Raw(paginator.RenderPaginatorNav(page => Url.Action("Index",
					new SearchViewModel { PageNumber = page, PageSize = paginator.ItemsPerPage, SortOrder = ViewBag.sortOrder, FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })));
			}
			else
			{
				@Html.Raw(paginator.RenderPaginatorNav(page => Url.Action("Index",
					new SortViewModel { PageNumber = page, PageSize = paginator.ItemsPerPage, SortOrder = ViewBag.sortOrder, FlipOrder = ViewBag.flipOrder })));
			}
		}
	</div>
</div>

<table class="table">
    <thead>
        <tr>
            @*<th>
                @Html.DisplayNameFor(model => model.Id)
            </th>*@
            <th>
				@Html.ActionLink(@Html.DisplayNameFor(model => model.Name).ToString(), "Index", new SearchViewModel { PageSize = paginator.ItemsPerPage, SortOrder = "name", FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })
            </th>
            <th>
                @Html.ActionLink(@Html.DisplayNameFor(model => model.Weight).ToString(), "Index", new SearchViewModel { PageSize = paginator.ItemsPerPage, SortOrder = "weight", FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })
            </th>
            <th>
                @Html.ActionLink(@Html.DisplayNameFor(model => model.GearType).ToString(), "Index", new SearchViewModel { PageSize = paginator.ItemsPerPage, SortOrder = "gearType", FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })
			</th>
			<th>
				@Html.ActionLink(@Html.DisplayNameFor(model => model.Condition).ToString(), "Index", new SearchViewModel { PageSize = paginator.ItemsPerPage, SortOrder = "condition", FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })
			</th>
			<th>
			</th>
		</tr>

	</thead>

	<tbody>
@foreach (var item in Model) {

		<tr>
            @*<td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Weight)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GearType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Condition) / 10 @*(@(item.Condition * 10)%)*@
            </td>
            <td>
				<div class="form-group-sm no-color btn-sm">
					<input type="button" value="Details" class="btn btn-info"
						   onclick="location.href='@Url.Action("Details", "WinterGear", new { id = item.Id })'" />
					<input type="button" value="Edit" class="btn btn-warning"
						   onclick="location.href='@Url.Action("Edit", "WinterGear", new { id = item.Id })'" />
					<input type="button" value="Remove" class="btn btn-danger"
						   onclick="location.href='@Url.Action("Delete", "WinterGear", new { id = item.Id })'" />
				</div>
            </td>
        </tr>
}
    </tbody>
</table>

<div class="row">
	<div class="col-md-12">
		@if (paginator.PageCount > 1)
		{
			@if (ViewBag.isSearch)
			{
				@Html.Raw(paginator.RenderPaginatorNav(page => Url.Action("Index",
					new SearchViewModel { PageNumber = page, PageSize = paginator.ItemsPerPage, SortOrder = ViewBag.sortOrder, FlipOrder = ViewBag.flipOrder, SearchCriteria = ViewBag.searchCriteria, GearTypeFilter = ViewBag.gearTypeFilter })));
			}
			else
			{
				@Html.Raw(paginator.RenderPaginatorNav(page => Url.Action("Index",
					new SortViewModel { PageNumber = page, PageSize = paginator.ItemsPerPage, SortOrder = ViewBag.sortOrder, FlipOrder = ViewBag.flipOrder })));
			}
		}
	</div>
</div>
<br />

<a href="#">Top</a>
